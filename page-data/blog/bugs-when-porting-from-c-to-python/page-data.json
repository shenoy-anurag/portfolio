{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-js",
    "path": "/blog/bugs-when-porting-from-c-to-python/",
    "result": {"data":{"markdownRemark":{"html":"<h2>Introduction</h2>\n<p>When porting code from one language to another, we can often introduce unexpected bugs into our code. I want to address a bug I recently encountered while porting a c program into python, so that you don't have to spend hours trying to figure out where your program is making the mistake.</p>\n<h2>Iteration Bug:</h2>\n<p>Consider the following c code. Say you are reusing the lastest value of <code class=\"language-text\">i</code>, in the following code, elsewhere.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">10</span></code></pre></div>\n<p>C language has incremented variable <code class=\"language-text\">i</code> to 10 and checked whether it is greater than 10. Thus, <code class=\"language-text\">i</code> is now <code class=\"language-text\">10</code> instead of <code class=\"language-text\">9</code>.</p>\n<p>When we do the same in python however, we don't get the same result.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">continue</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">9</span></code></pre></div>\n<p>Python has first checked whether <code class=\"language-text\">i + 1</code> is less than 10, and only increments <code class=\"language-text\">i</code> if the condition holds true.</p>\n<p>I know this was super short.\nI'll try to keep updating this article as I find more such potential bugs.</p>\n<p>I hope this will be useful when you try porting code from one language to another.</p>","frontmatter":{"date":"December 02, 2021","slug":"/blog/bugs-when-porting-from-c-to-python","title":"Bugs when porting from C to Python"}}},"pageContext":{"id":"64697346-aa3d-5807-8ab0-9a21539ce3c5","frontmatter__slug":"/blog/bugs-when-porting-from-c-to-python","__params":{"frontmatter__slug":"blog"}}},
    "staticQueryHashes": ["63159454"]}